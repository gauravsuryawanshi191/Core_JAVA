Day 1
1. Refer to "Installation Instructions" from day1-data\day1_help & complete the same.

2. MUST go through "sequence.txt"  from day1-data\day1_help\ & day1-data\day1_help\slides\PPTDay1.pdf

3. Go through  code samples from day1-data\code\src

4. Solve (Hands on)
4.1 Accept 2 double values from User (using Scanner). Check data type.
. If arguments are not doubles , supply suitable error message & terminate.
If numbers are double values , print its average.
Hint : Method of Scanner to use : hasNextDouble , nextDouble 

4.2 Display food menu to user. User will select items from menu along with the quantity. (eg 1. Dosa 2. Samosa 3. Idli ... 10 . Generate Bill ) Assign fixed prices to food items(hard code the prices)
When user enters 'Generate Bill' option(10) , display total bill & exit.


OR 
Create java application for the following
Accept 2 numbers from user & operation to perform
1. Add 2.Subtract 3. Multiply 4.Divide 5.Exit
Display the result of the operation. 
Java app must continue to run till user chooses exit option.

5. 

Additional reference for long to float conversion
https://stackoverflow.com/questions/15229323/java-why-is-converting-a-long-64-to-float-32-considered-widening/15229379


Day 2

1. Refer to today's sequence
refer : day2-data\code
Revise :  mem pics for Java data areas(stack,heap,method area),
Garbage collection introduction

refer : day1-data\day1_help\diagrams\different type of vars.png


2. Solve Tank assignment along with memory picture.

What will be the output ?

class Tank {
  private int level;
  Tank(int l)
   {
     level=l;
   }
  public void setLevel(int level1)
  {
    level=level1;
  }
  public int getLevel()
  {
    return level;
  }
}	

public class Assignment {
  public static void main(String[] args) {
    Tank t1 = new Tank(10);
    Tank t2 = new Tank(20);
     s.o.p("1: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1 = t2;//1st tank obj is marked GC
    s.o.p("2: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1.setLevel(27);
     s.o.p("3: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t2.setLevel(t1.getLevel()+10);
     s.o.p("4: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
  }
}

3. What will happen (solve ready code samples : along with mem pics )
day2-data\day2_help\params_passing
3.1 TestParamPassing1.java
3.2 TestParamPassing1.java

4. Hands on

Create a  class Point2D   for representing a point in x-y co-ordinate system.

4.1 Create a parameterized constructor to accept x & y co-ords.

4.2 Add  show() method  --to return point's x & y co-ords
eg : public String show() {.....}

4.3 (Optional work)
Add a non static  , isEqual method to Point2D class : boolean returning method : must return true if both points are having same x,y co-ords or false otherwise.

How will you invoke it from the tester 
A Hint : 

eg : p1.isEqual(p2); 
OR
p2.isEqual(p1)

4.4 (Optional work)
Add a non static method , calculateDistance , to calc distance between 2 points
Hint : use distance formula.

eg : In Tester :
double distance=p1.calculateDistance(p2);

4.5  Create a driver  class(for UI )  , "TestPoint" , with main(..)

4.6  Accept x,y co-ordinates for 2 points n store the co-ordinates
4.7  Display x,y co-ordinates of both of the points plotted  (using show() method)
4.8  (Optional work)
Find out if the points  are same or different (Hint : isEqual)
Print the message accordingly. (print SAME or DIFFERENT)
If points are not same , display distance between these 2 points.


5. Answer this : 

1. Conside below class.
class Emp
{
  private int id;
  private String name;
  private static int noOfEmps;
}
Suppose you create , 10 emps objects, 

How many copies of
id : 
name : 
noOfEmps : 

6. In  code(line no 1--6) , how many classes are loaded ?
how many objs ? 

psvm(....) { 
1. Scanner sc;
2. Emp e;
3. Box b;
4. Date d;
5. String s;
6. int[] data;
}


Day 4.
Refer to today's sequence : 
1. import day4.1 , in your IDE's workspace , to revise
1.1 for-each loop with primitive arrays
1.2 Array of references
1.3 static data members , methods , init blocks , import static
(refer to a readme)
1.4 Constructor invocation , in the inheritance hierarchy
(super(...)
1.5 Method overriding basic example , to see run time polymorphism.

Solve : 
1.6 Continue with Box class n TestBox , from today's code.
Solve :  
 Double box width for all boxes having volume > 100.(Can you use for-each & solve this) 


2. Solve (can be solved in IDE)
Continue with Day 2' Point2D class.

2.1   Create a driver  class(for UI)  , in the "tester" package "TestPoints" , with main(..)

1. Prompt user , how many points to plot? 
Create suitable array. (Hint : array of references)



2. Show following options

Options
1. Plot a point
Inputs : array index , x  ,y
Check boundary conditions  , check if some point is already plotted at the same index , if not then store the point details.
In case of any errors , display suitable error message.

2.   Display x,y co-ordinates of all the points plotted so far ,using for-each loop.

3.   Accept 2 indices from user .
Find out if the points at these indices are same or different (Hint : isEqual)
Print the message accordingly. 
If points are not same , display distance between these 2 points.
(Draw mem diagram for your clarity, if needed/)

0. Exit 



Day 5
1. import day5.1 in your workspace , refer to today's sequence
Revise
types of polymorphism
upcasting , downcasting n instanceof keyword
Object class Methods : toString n equals

2. Solve readymade code from 
"day5-data\day5_help\ready code"

Open these java src files n guess what will happen ?
Compile time error
Run time error
If no errs , what will be o/p ?


3. Answer this
When you invoke System.out.println(Object ref) , how it auto calls ref.toString ?
Hint : refer Java docs

4. Try to complete , Day 4 point array assignment
OPTIONAL WORK (after completing all of above, if time permits)


Hands on 
Read complete assignment n then only solve.

4.1 Can you arrange Fruit,Apple,Orange,Mango in inheritance hierarchy ?
Use tight encapsulation.

4.2 Properties (instance variables)  : color : String , weight : double , name:String, fresh : boolean

4.3 Add suitable constructor

4.4 Override  toString correctly to return state of all fruits (return only  : name ,color , weight )

4.5 Add a taste() method : public String taste()

For Fruit : Can you identify taste of any general fruit ? NO
So add a taste() with this definition : returns "no specific taste" 

Apple : should return  "sweet n sour"
Mango : should return  "sweet"
Orange : should return  "sour"

4.6 Add specific functionality , in the sub classes
In Mango : public void pulp() {Display name n color of the fruit + a mesg  creating  pulp!}
In Orange : public void juice() {Display name n weight of the fruit + a mesg extracting juice!}
In Apple : public void jam() {Display name of the fruit + a mesg  making jam!}

4.7 Add all of above classes under the package "com.app.fruits"
4.8 Create java application FruitBasket , with main method , as a tester
4.9 Prompt user for the basket size n create suitable data structure

4.10 Supply options
1. Add Mango
2. Add Orange
3. Add Apple
NOTE : You will be ALWAYS adding a fresh fruit in the basket , in all of above options.

4. Display names of all fruits in the basket.

5. Display name,color,weight , taste of all fresh fruits , in the basket.


6. Mark a fruit in a basket , as stale(=not fresh)
i/p : index 
o/p : error message (in case of invalid index) or mark it stale

7. Mark all sour fruits stale 
Hint : Use equals() method of the String class.

8. Invoke fruit specific functionality (pulp / juice / jam)
i/p : index
Invoke correct functionality (pulp / juice / jam)

9. Exit 



Day 6
No NEW coding assignments !!!!!
Please complete pending work , with the help of lab faculty.

1. Answer this : 
Can a sub class reference DIRECTLY refer to super class instance ?????

What will happpen if you apply downcasting ???? : 

What will happen ?
Person p=new Person("a1","b1");
Student s=p;

Student s=(Student) p;
s.study();

2. import day6.1 to revise
overriding of equals method

3. import day6.2 to revise 
abstract method n abstract classes

4. import day6.3 to revise , introduction to Java interfaces.


Day 7

1. Answer this
1.1 Given : 
public interface A {	
	double calculate(double d1,double d2);
}
public interface B {	
	double calculate(double d1,double d2);
}
public class C implements A,B {....}

What is mandatory , to make above class concrete ? (w/o compiler errs)

1.2 
Given : 
public interface A {	
	double calculate(double d1,double d2);
}
public interface B {	
	int calculate(int d1,int d2);
}
public class C implements A,B {....}

What is mandatory , to make above class concrete ? (w/o compiler errs)

1.3 
Given : 
public interface A {	
	double calculate(double d1,double d2);
}
public interface B {	
	int calculate(double d1,double d2);
}
public class C implements A,B {....}

What is mandatory , to make above class concrete ? (w/o compiler errs)

2. import day7.1 , in your workspace , to revise more features of interfaces.

3. import day7.2 in your workspace , to revise exception handling
(try,catch , finally , throw , throws , try-with-resources,custom exceptions)

4.
Hands on 
(Main objective :Run time polymorphism achieved using interfaces)
Create Java application for fixed stack & growable stack based on Stack i/f , for storing customer details

Customer has : id(int), name (string) , address(string)
Provide suitable constructor n toString

Steps
3.1  Create Customer class
3.2 Stack interface -- push & pop functionality for Customer refs. & declare STACK_SIZE as a constant. 
3.3 Create implementation class of Stack i/f -- FixedStack (array based)
3.4 Create another implementation class of Stack i/f-- GrowableStack (array based)

3.5 
Create Tester class ()
Display Menu
Note : Must use 1 switch-case only. You won't need any complex nested control structure
Once user selects either fixed or growable stack , user shouldn't be allowed to change the selection of the stack.

1 -- Choose Fixed Stack

2 -- Choose Growable Stack

3 -- Push data 
I/P : Accept customer details & store these details in the earlier chosen stack or give error mesg : NO stack chosen !!!
In case user has chosen fixed stack , n stack is full give err mesg. 
In case of growable stack , should be able to save customer details w/o getting err.

4 --- Pop data & display the same (from the earlier chosen stack or give error mesg : NO stack chosen !!!)
No inputs are required : pop customer details from the top of the stack

5 -- Exit

 






